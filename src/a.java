
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class a extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return aSym.class;
}

  /** Default constructor. */
  @Deprecated
  public a() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public a(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public a(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\005\003\000\002\006\005\000\002\006\003\000\002" +
    "\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\010\011\012\013\010\014\004\001\002\000" +
    "\016\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\012\ufff5" +
    "\001\002\000\016\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\012\ufff8\001\002\000\012\002\uffff\011\uffff\013\uffff" +
    "\014\uffff\001\002\000\016\004\ufffb\005\ufffb\006\ufffb\007" +
    "\021\010\020\012\ufffb\001\002\000\016\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\012\ufff6\001\002\000\012\002" +
    "\030\011\012\013\010\014\004\001\002\000\010\011\012" +
    "\013\010\014\004\001\002\000\010\004\015\005\014\006" +
    "\016\001\002\000\010\011\012\013\010\014\004\001\002" +
    "\000\012\002\ufffe\011\ufffe\013\ufffe\014\ufffe\001\002\000" +
    "\010\011\012\013\010\014\004\001\002\000\016\004\ufffc" +
    "\005\ufffc\006\ufffc\007\021\010\020\012\ufffc\001\002\000" +
    "\010\011\012\013\010\014\004\001\002\000\010\011\012" +
    "\013\010\014\004\001\002\000\016\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\012\ufffa\001\002\000\016\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9\001\002\000" +
    "\016\004\ufffd\005\ufffd\006\ufffd\007\021\010\020\012\ufffd" +
    "\001\002\000\010\005\014\006\016\012\026\001\002\000" +
    "\016\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7" +
    "\001\002\000\012\002\001\011\001\013\001\014\001\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\014\002\010\003\005\004\012\005\006\006" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\026\004\012\005\006\006\004\001\001\000\010\004\024" +
    "\005\006\006\004\001\001\000\002\001\001\000\006\005" +
    "\023\006\004\001\001\000\002\001\001\000\006\005\016" +
    "\006\004\001\001\000\002\001\001\000\004\006\022\001" +
    "\001\000\004\006\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$a$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$a$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$a$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$a$actions {
  private final a parser;

  /** Constructor */
  CUP$a$actions(a parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$a$do_action_part00000000(
    int                        CUP$a$act_num,
    java_cup.runtime.lr_parser CUP$a$parser,
    java.util.Stack            CUP$a$stack,
    int                        CUP$a$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$a$result;

      /* select the action based on the action number */
      switch (CUP$a$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$a$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-1)), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          return CUP$a$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$a$stack.elementAt(CUP$a$top-1)).value;
		RESULT = start_val;
              CUP$a$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-1)), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$a$parser.done_parsing();
          return CUP$a$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$a$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$a$stack.peek()), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          return CUP$a$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.elementAt(CUP$a$top-1)).value;
		 System.out.println(e); 
              CUP$a$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-1)), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          return CUP$a$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr PLUS factor 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.elementAt(CUP$a$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.peek()).value;
		 RESULT = e + f; 
              CUP$a$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          return CUP$a$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr MINUS factor 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.elementAt(CUP$a$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.peek()).value;
		 RESULT = e - f; 
              CUP$a$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          return CUP$a$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= factor 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.peek()).value;
		 RESULT = f; 
              CUP$a$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$a$stack.peek()), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          return CUP$a$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // factor ::= factor TIMES term 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.elementAt(CUP$a$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.peek()).value;
		 RESULT = f * t; 
              CUP$a$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          return CUP$a$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // factor ::= factor DIVIDE term 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.elementAt(CUP$a$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.peek()).value;
		 RESULT = f / t; 
              CUP$a$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          return CUP$a$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // factor ::= term 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.peek()).value;
		 RESULT = t; 
              CUP$a$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$a$stack.peek()), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          return CUP$a$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= LPAREN expr RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.elementAt(CUP$a$top-1)).value;
		 RESULT = e; 
              CUP$a$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$a$stack.elementAt(CUP$a$top-2)), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          return CUP$a$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.peek()).value;
		 RESULT = n; 
              CUP$a$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$a$stack.peek()), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          return CUP$a$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= ID 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$a$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$a$stack.peek()).value;
		 RESULT = 0; 
              CUP$a$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$a$stack.peek()), ((java_cup.runtime.Symbol)CUP$a$stack.peek()), RESULT);
            }
          return CUP$a$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$a$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$a$do_action(
    int                        CUP$a$act_num,
    java_cup.runtime.lr_parser CUP$a$parser,
    java.util.Stack            CUP$a$stack,
    int                        CUP$a$top)
    throws java.lang.Exception
    {
              return CUP$a$do_action_part00000000(
                               CUP$a$act_num,
                               CUP$a$parser,
                               CUP$a$stack,
                               CUP$a$top);
    }
}

}
