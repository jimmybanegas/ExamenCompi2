import java.util.*;
import java_cup.runtime.*;
import Tree.*;

parser code {:
    public Hashtable<String, Integer> variables
        = new Hashtable<String, Integer>();
    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

terminal        NONTERMINAL, TERMINAL, ASSIGNATION ,SEMI, COMMA, PIPE, COLON ;
terminal String ID;

non terminal Statements listOfstatements;
non terminal StatementNode statement;

    listOfstatements ::= listOfstatements:es statement:e
                    {: es.Statements.add(e); RESULT = es;    :}
                    |
                    {:RESULT = new Statements();:} ;

    statement ::= symbols_list:le EQUALS symbols_list:re SEMI
                 {:RESULT = new StatementNode(le,re);:}
                 ;

    symbols_list ::= symbols_list:la PLUS term:ra
                    {:RESULT = new SymbolDeclarationNode(la,ra); :}
                |
                term:t
                    {:RESULT = t; :}
                 ;

     expression ::= expression:la PLUS term:ra
                        {:RESULT = new SymbolDeclarationNode(la,ra); :}
                    |
                    term:t
                        {:RESULT = t; :};
