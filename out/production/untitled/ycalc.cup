import java.util.*;
import java_cup.runtime.*;
import Tree.*;

parser code {:

    public void report_error(String message, Object info) {

        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

terminal        NONTERMINAL, TERMINAL, ASSIGNATION ,SEMI, COMMA, PIPE, COLON ;
terminal String ID;

non terminal Statements listOfstatements;
non terminal StatementNode statement;
non terminal ArrayList<String> symbols_list,productions_list;
//non terminal StatementNode  , production;

    listOfstatements ::= listOfstatements:es statement:e
                    {: es.Statements.add(e); RESULT = es;    :}
                    |
                    {:RESULT = new Statements();:}
                    ;

    statement ::= NONTERMINAL symbols_list:l SEMI
                 {:RESULT = new SymbolDeclarationNode("NONTERMINAL","Object",l);:}
                 |
                 TERMINAL symbols_list:l SEMI
                 {:RESULT = new SymbolDeclarationNode("TERMINAL","Object",l);:}
                 |
                 ID:i ASSIGNATION productions_list:l SEMI
                 {:RESULT = new ProductionNode(i,l);:}
                 ;

    symbols_list ::= symbols_list:li COMMA ID:i
                {:RESULT = new ArrayList<>();
                    RESULT.addAll((Collection)li);
                    RESULT.add(i); :}
                |
                ID:i
                {:RESULT = new ArrayList<>(Arrays.asList(i)); :}
                ;

    productions_list ::= productions_list:li ID:e
                         {:RESULT = new ArrayList<>();
                            RESULT.addAll((Collection)li);
                            RESULT.add(e);:}
                    |
                    ID:i
                        {:RESULT = new ArrayList<>(Arrays.asList(i)); :}
                    |
                    productions_list:le PIPE
                          {:RESULT = new ArrayList<>();
                                 RESULT.addAll((Collection)le); :}
                    ;





